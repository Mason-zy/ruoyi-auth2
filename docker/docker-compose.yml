version: '3.8'

# 读取 .env 文件中的环境变量
# env_file:
#   - .env
# 注意: Docker Compose v2 及以上版本默认会自动加载同目录下的 .env 文件
# 如果你的 Compose 版本较低或遇到问题，可以取消上面两行的注释

services:
  backend:
    # 使用 .env 中定义的完整镜像名称和标签
    image: ${DOCKER_REGISTRY}/${COMPOSE_PROJECT_NAME:-ruoyi}-backend:${BACKEND_IMAGE_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-ruoyi}-backend
    # 如果需要直接映射后端端口 (不推荐，应通过 Nginx 访问)
    # ports:
    #   - "${BACKEND_PORT:-8080}:8080"
    environment:
      # 通过环境变量覆盖 Spring Boot 配置
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_REDIS_HOST: ${SPRING_REDIS_HOST:-redis}
      SPRING_REDIS_PORT: ${SPRING_REDIS_PORT:-6379}
      # SPRING_REDIS_PASSWORD: ${SPRING_REDIS_PASSWORD} # 移除密码设置
      # 添加 Druid 配置项 (使用 application-druid.yml 中的值作为默认参考)
      SPRING_DATASOURCE_DRUID_INITIALSIZE: ${SPRING_DATASOURCE_DRUID_INITIALSIZE:-10} # 之前添加的，改为从env或默认10
      SPRING_DATASOURCE_DRUID_MINIDLE: ${SPRING_DATASOURCE_DRUID_MINIDLE:-10}
      SPRING_DATASOURCE_DRUID_MAXACTIVE: ${SPRING_DATASOURCE_DRUID_MAXACTIVE:-20}
      SPRING_DATASOURCE_DRUID_MAXWAIT: ${SPRING_DATASOURCE_DRUID_MAXWAIT:-60000}
      SPRING_DATASOURCE_DRUID_TIMEBETWEENEVICTIONRUNSMILLIS: ${SPRING_DATASOURCE_DRUID_TIMEBETWEENEVICTIONRUNSMILLIS:-60000}
      SPRING_DATASOURCE_DRUID_MINEVICTABLEIDLETIMEMILLIS: ${SPRING_DATASOURCE_DRUID_MINEVICTABLEIDLETIMEMILLIS:-300000}
      SPRING_DATASOURCE_DRUID_MAXEVICTABLEIDLETIMEMILLIS: ${SPRING_DATASOURCE_DRUID_MAXEVICTABLEIDLETIMEMILLIS:-900000}
      SPRING_DATASOURCE_DRUID_VALIDATIONQUERY: ${SPRING_DATASOURCE_DRUID_VALIDATIONQUERY:-SELECT 1 FROM DUAL}
      SPRING_DATASOURCE_DRUID_TESTWHILEIDLE: ${SPRING_DATASOURCE_DRUID_TESTWHILEIDLE:-true}
      SPRING_DATASOURCE_DRUID_TESTONBORROW: ${SPRING_DATASOURCE_DRUID_TESTONBORROW:-false}
      SPRING_DATASOURCE_DRUID_TESTONRETURN: ${SPRING_DATASOURCE_DRUID_TESTONRETURN:-false}
      # 添加connectTimeout
      SPRING_DATASOURCE_DRUID_CONNECTTIMEOUT: ${SPRING_DATASOURCE_DRUID_CONNECTTIMEOUT:-30000}
      # 添加socketTimeout
      SPRING_DATASOURCE_DRUID_SOCKETTIMEOUT: ${SPRING_DATASOURCE_DRUID_SOCKETTIMEOUT:-60000}
      # 可以添加其他需要的环境变量
      # JAVA_OPTS: "-Xms512m -Xmx1024m" # JVM 参数示例
    depends_on: # 依赖于数据库和 Redis 先启动
      {} # No longer depends on locally defined mysql or redis
    networks:
      - app-network
    healthcheck: # 容器健康检查 (假设有 actuator/health 端点)
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"] # 需要项目中引入 actuator
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # 给 Spring Boot 足够的启动时间
    restart: always

  frontend:
    # 使用 .env 中定义的完整镜像名称和标签
    image: ${DOCKER_REGISTRY}/${COMPOSE_PROJECT_NAME:-ruoyi}-frontend:${FRONTEND_IMAGE_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-ruoyi}-frontend
    ports:
      - "${FRONTEND_PORT:-80}:80" # 映射 Nginx 的 80 端口到宿主机
    depends_on: # 依赖于后端服务
      - backend
    networks:
      - app-network
    restart: always

# 定义网络
networks:
  app-network:
    driver: bridge # 使用默认的桥接网络驱动

# 定义命名卷
volumes:
  {} # mysql_data and redis_data are no longer needed here

